<!DOCTYPE html>
<html>
    <head>
        <title>Foodelivery</title>

        <!-- Viewport mobile tag for sensible mobile support -->
        <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
        <!--Import Google Icon Font-->
        <link href="http://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
        <!--Import materialize.css-->
        <link type="text/css" rel="stylesheet" href="css/materialize.css"  media="screen,projection"/>
         <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>

        <!--Let browser know website is optimized for mobile-->
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

        <!--  
            Stylesheets and Preprocessors
            ==============================

            You can always bring in CSS files manually with `<link>` tags, or asynchronously
            using a solution like AMD (RequireJS).  Or, if you like, you can take advantage 
            of Sails' conventional asset pipeline (boilerplate Gruntfile).

            By default, stylesheets from your `assets/styles` folder are included
            here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
            are supported. In production, your styles will be minified and concatenated into
            a single file.

            To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
            For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
        -->

        <!--STYLES-->
        <link rel="stylesheet" href="/styles/importer.css">
        <link rel="stylesheet" href="/slick/slick-theme.css">
        <link rel="stylesheet" href="/slick/slick.css">
        <!--STYLES END-->
    </head>

    <body>
        

        <nav>
            <a href="#" class="brand-logo center">Foodelivery</a>
            <div class="nav-wrapper">
                <div class="row">
                    <div class="col s3">
                        <form>
                            <div class="input-field">
                                <input id="search" type="search" required>
                                <label for="search"><i class="material-icons">search</i></label>
                                <i class="material-icons">close</i>
                            </div>
                        </form>
                    </div>
                    <div class="col s2 offset-s7">
                        <ul id="nav-mobile" class="right hide-on-med-and-down">
                            <li><a href="#" id="navbar-login">Login</a></li>
                            <li><a href="#">Register</a></li>
                            <li><a href="cart.html">Cart</a></li> 
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
        <br>

        <%- body %>


      <!--
            Client-side Templates
            ========================

            HTML templates are important prerequisites of modern, rich client applications.
            To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
            that you load these templates client-side.

            By default, your Gruntfile is configured to automatically load and precompile
            client-side JST templates in your `assets/templates` folder, then
            include them here automatically (between TEMPLATES and TEMPLATES END).

            To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
            For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
            stringfile before they're served.
        -->

        <!--TEMPLATES-->
        
        <!--TEMPLATES END-->


        <!--

            Client-side Javascript
            ========================

            You can always bring in JS files manually with `script` tags, or asynchronously
            on the client using a solution like AMD (RequireJS).  Or, if you like, you can 
            take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

            By default, files in your `assets/js` folder are included here
            automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
            CoffeeScript (.coffee) are supported. In production, your scripts will be minified
            and concatenated into a single file.

            To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
            For example, here are a few things you could do:

            + Change the order of your scripts
            + Import scripts from other directories
            + Use a different preprocessor, like TypeScript

        -->

        <!--SCRIPTS-->
        <script src="/js/dependencies/sails.io.js"></script>
        <script src="/js/foodelivery.js"></script>
        <script src="/js/materialize.js"></script>
        <script src="/js/materialize.min.js"></script>
        <script src="/slick/slick.js"></script>
        <script src="/slick/slick.min.js"></script>
        <!--SCRIPTS END-->
    </body>
</html>
